#Jerry Champion Jr

import LA
import QR

Vector = list[complex]
Matrix = list[list[complex]]


def least_squares(matrix: Matrix, vector: Vector) -> Vector:
    """Finds the least squares solution of a matrix-vector product, Ax = b
    Starts by finding the QR factorization of the input matrix.  Solve the equation
    for Rx = Q*b, then perform back sub to find x, and return
    Args:
        matrix: The matrix A in an equation Ax = b
        vector: The vector b in an equation Ax = b
    Returns:
        The vec_x in an equation formed Ax = b
    """
    vec_x: Vector = [None for _ in matrix]
    mat_q: Matrix
    mat_r: Matrix
    mat_q, mat_r = QR.householder(matrix)
    vec_v: Vector = LA.matr_vec_multi(QR.matconj(mat_q), vector)
    for x_el in range(len(matrix) - 1, 0 - 1, -1):
        cont: complex = 0
        for i in range(x_el, len(vec_x)):
            if i != x_el:
                cont += vec_x[i] * mat_r[i][x_el]
        vec_x[x_el] = (vec_v[x_el] - cont) / mat_r[x_el][x_el]
    return vec_x
